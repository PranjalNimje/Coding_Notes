**************************************************************************************

MAP

**************************************************************************************

-HashMap
	-LinkedHashMap
-IdentityHashMap
-WeakHashMap
-SortedMap
	-NavigationalSortedMap
		-TreeMap
-HashTable

--------------------------------------------------------------------------

Collection views of the map

1)  Set KeySet() -----------gives a set of keys
			   -for (String key : map.keySet())

2)  Collection values()-----gives a ___ of values
			   -for (Object value : map.values()) 

3)  Set entrySet------------gives a set of Key-Value pair
			   -mainly used with map.entry

			   -for (Map.Entry<String, Object> entry : map.entrySet()) {
    			    String key = entry.getKey();
                            Object value = entry.getValue();
                            // ...
                            }


Entry (Interface)

-each key-value pair is called one entry
-without existing map object there is no chance of entry object
- interface Map
	-Interface Entry
		-Object getKey();     
		-Object getValue();  
		-Object setValue();

-Each map provides access to so called entry set, which is a set of pairs from the map.
-Each pair is represented by an instance of Map.Entry<K,V>. ***************
-Map<Integer,String> myMap = ...
 for (Map.Entry<Integer,String> e : myMap.entrySet()) {
    System.out.println(e.getKey()+" ---> "+e.getValue());
 }
-If we want to perform operations on key/values use entry interface( Map.Entry)



--------------------------------------------------------------------------

Iterate over a map using streams

--Using the Java 8 Stream API

final long[] i = {0};
map.entrySet().stream().forEach(e -> i[0] += e.getKey() + e.getValue());

--Using the Java 8 Stream API parallel

final long[] i = {0};
map.entrySet().stream().parallel().forEach(e -> i[0] += e.getKey() + e.getValue());


hm.forEach((k,v) -> System.out.println("key: "+k+" value:"+v));


----------------------------------------------------------------------------------

How to update a value, given a key in a hashmap?

map.put(key, map.get(key) + 1);

It will update the value for the existing mapping. Note that this uses auto-boxing. 
With the help of map.get(key) we get the value of corresponding key, then you can update with your requirement. 
Here I am updating to increment value by 1.


----------------------------------------------------------------------------------

put(k,v)
putAll(Map)
get(key)->gets the value of key
	-> if key not available then we get null
	-> get(key) gives value
remove(key)
containsKey(key) -> returns true and false
containsValue(value) ->returns true or false
int size
isEmpty -> true or false

----------------------------------------------------------------------------------s