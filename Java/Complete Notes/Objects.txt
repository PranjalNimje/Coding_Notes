object is a member (also called an instance) of a Java class. Each object has an identity, 
a behavior and a state.
Objects are created at runtime from templates, which are also known as classes.

objects define their interaction with the outside world through the methods that they expose. 

real-world objects: your dog, your desk, your television set, your bicycle
Real-world objects share two characteristics: 
	They all have state and behavior. 
	Dogs have 
		state 		(name, color, breed, hungry) and 
		behavior 	(barking, fetching, wagging tail). 
	Bicycles also have 
		state 		(current gear, current pedal cadence, current speed) and 
		behavior 	(changing gear, changing pedal cadence, applying brakes). 

Software objects are conceptually similar to real-world objects: they too consist of state and related behavior.
An object stores its state in fields (variables in some programming languages) and 
exposes its behavior through methods (functions in some programming languages).


Car

- State (field)
	Color
	Size
	Weight
	Price
	FuelCapacity
	NoOfPassengers

- Behaviour (methods) 
	Start
	Stop
	Accelerate
	TurnOnWipers
	TurnRight
	TurnLeft


Data Encapsulation
Hiding internal state and requiring all interaction to be performed through an object's methods is known as data encapsulation
By interacting only with an object's methods, the details of its internal implementation remain hidden from the outside world.

-----------------------------------------------------------------------------------------------------------------------------

What Is a Class?

There may be thousands of other bicycles in existence, all of the same make and model. 
Each bicycle was built from the same set of blueprints and therefore contains the same components.

In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles.
A class is the blueprint from which individual objects are created.

// Create two different 
// Bicycle objects
Bicycle bike1 = new Bicycle();
Bicycle bike2 = new Bicycle();

 // Invoke methods on 
// those objects
bike1.changeCadence(50);
bike1.speedUp(10);

bike2.changeGear(2);
bike2.changeCadence(40);