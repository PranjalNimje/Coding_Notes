

special "class" 
represents a group of constants 
(unchangeable variables, like final variables).

To create an enum, 
use the enum keyword (instead of class or interface), 
and separate the constants with a comma. 
Note that they should be in uppercase letters:

Example
enum Level {
  LOW,
  MEDIUM,
  HIGH
}

You can access enum constants with the dot syntax:

Level myVar = Level.MEDIUM;

----------------------------------------------------------------------------------------------------------------------------------------------------

import java.time.LocalDate;
import java.time.Month;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
//w  ww . j  a v a 2 s . com
public class Main {
  public static void main(String[] args) {
    Map<Long,String>  idToNameMap  = Employee.persons()
        .stream()
        .collect(Collectors.toMap(Employee::getId,  Employee::getName));
     System.out.println(idToNameMap);
  }
}

class Employee {
  public static enum Gender {
    MALE, FEMALE
  }

  private long id;
  private String name;
  private Gender gender;
  private LocalDate dob;
  private double income;

  public Employee(long id, String name, Gender gender, LocalDate dob,
      double income) {
    this.id = id;
    this.name = name;
    this.gender = gender;
    this.dob = dob;
    this.income = income;
  }

  public long getId() {
    return id;
  }
  public String getName() {
    return name;
  }
  public static List<Employee> persons() {
    Employee p1 = new Employee(1, "Jake", Gender.MALE, LocalDate.of(1971,
        Month.JANUARY, 1), 2343.0);
    Employee p2 = new Employee(2, "Jack", Gender.MALE, LocalDate.of(1972,
        Month.JULY, 21), 7100.0);
    Employee p3 = new Employee(3, "Jane", Gender.FEMALE, LocalDate.of(1973,
        Month.MAY, 29), 5455.0);
    Employee p4 = new Employee(4, "Jode", Gender.MALE, LocalDate.of(1974,
        Month.OCTOBER, 16), 1800.0);
    Employee p5 = new Employee(5, "Jeny", Gender.FEMALE, LocalDate.of(1975,
        Month.DECEMBER, 13), 1234.0);
    Employee p6 = new Employee(6, "Jason", Gender.MALE, LocalDate.of(1976,
        Month.JUNE, 9), 3211.0);

    List<Employee> persons = Arrays.asList(p1, p2, p3, p4, p5, p6);

    return persons;
  }
}


----------------------------------------------------------------------------------------------------------------------------------------------------
Example 2

package toMap;

import java.util.Arrays;
import java.util.List;

public class BlogPost {
    String title;
    String author;
    BlogPostType blogPostType;
    int likes;
    
    enum BlogPostType {
        NEWS,
        REVIEW,
        GUIDE
    }
    
    
    
    public BlogPost(String title, String author, int likes, BlogPostType blogPostType) {
		super();
		this.title = title;
		this.author = author;
		this.likes = likes;
		this.blogPostType = blogPostType;
	}

	
    }
    
    public static List<BlogPost> blogPostDetails(){
    	BlogPost b1=new BlogPost("Fault","R.k",66, BlogPostType.NEWS); 
    	BlogPost b2=new BlogPost("Harry Potter","J.k.Rowling",4567, BlogPostType.GUIDE);
    	BlogPost b3=new BlogPost("Lord of the rings","kk.k",2568, BlogPostType.REVIEW);
    	BlogPost b4=new BlogPost("MUMBAI Times","Sudeep Ramam",834, BlogPostType.NEWS);
    	BlogPost b5=new BlogPost("Kesariya","ksdgk",763, BlogPostType.REVIEW);
    	BlogPost b6=new BlogPost("H.C VERMA","H.C VERMA",633, BlogPostType.GUIDE);
    	BlogPost b7=new BlogPost("limitless","jkl.sr",345, BlogPostType.REVIEW);
    	BlogPost b8=new BlogPost("Womens health","Subramaniam",66, BlogPostType.NEWS);
    	
    	List<BlogPost> blogPostDetails = Arrays.asList(b1,b2,b3,b4,b5,b6,b7,b8);
    	
    	return blogPostDetails;
    }
    
    
}


Map<BlogPostType, List<String>> postsPerType = blogPostDetails.stream()
				  .collect(Collectors.groupingBy(BlogPost::getBlogPostType, 
						  Collectors.mapping(BlogPost::getAuthor, Collectors.toList())));

Map<String, List<String>> titleAndLikes2 = blogPostDetails.stream()
				  .collect(Collectors.groupingBy(BlogPost::getTitle,
						  Collectors.mapping(BlogPost::getAuthor, Collectors.toList())));

----------------------------------------------------------------------------------------------------------------------------------------------------



Class methods
Sr.No.	Method & Description
1	protected Object clone()		This method throws CloneNotSupportedException.
2	int compareTo(E o)			This method compares this enum with the specified object for order.
3	boolean equals(Object other)		This method returns true if the specified object is equal to this enum constant.
4	protected void finalize()		This method returns enum classes cannot have finalize methods.
5	Class<E> getDeclaringClass()		This method returns the Class object corresponding to this enum constant's enum type.
6	int hashCode()				This method returns a hash code for this enum constant.
7	String name()				This method returns the name of this enum constant, exactly as declared in its enum declaration.
8	int ordinal()				This method returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero).
9	String toString()			This method returns the name of this enum constant, as contained in the declaration.
10	static <T extends Enum<T>> 
	TvalueOf(Class<T> enumType, String name)This method returns the enum constant of the specified enum type with the specified name.